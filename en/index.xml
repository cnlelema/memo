<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome on Lele&#39;s Memo</title>
    <link>https://cnlelema.github.io/memo/en/</link>
    <description>Recent content in Welcome on Lele&#39;s Memo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://cnlelema.github.io/memo/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BOGO: Buy Spatial Memory Safety, Get Temporal Memory Safety (Almost) Free</title>
      <link>https://cnlelema.github.io/memo/en/mem-safe/ptr-meta/mpx/bogo/</link>
      <pubDate>Sat, 12 Oct 2019 20:29:22 -0400</pubDate>
      
      <guid>https://cnlelema.github.io/memo/en/mem-safe/ptr-meta/mpx/bogo/</guid>
      <description>Reference 1
 LLVM MPX (BOGO)  Q&amp;amp;A How to determine the size of object? How to store the bound info in MPX? How to do bound checking? How to choose the instrumentation point? A Map from instruction to the pointer it want to access? Reference 1 Overview A module pass: class llmpx: public ModulePass runOnModule(Module &amp;amp;) Methods: mpxPass(Module &amp;amp;) harden_cfi(Module &amp;amp;) create_global_constants(Module &amp;amp;) collect_safe_access(Module &amp;amp;) transform_functions(Module &amp;amp;) transform_global(Module &amp;amp;)</description>
    </item>
    
    <item>
      <title>Secure HW/SW Interface</title>
      <link>https://cnlelema.github.io/memo/en/arch/sva/hwsw/securehwsw/</link>
      <pubDate>Mon, 22 Jul 2019 16:15:09 -0400</pubDate>
      
      <guid>https://cnlelema.github.io/memo/en/arch/sva/hwsw/securehwsw/</guid>
      <description>Motivation OS memory safety research Memory safety for OS code:
 OS designs based on safe languages; Compiler techniques such as SVA-M to enforce memory safety for commodity OSs in unsafe languages; Instrumentation techniques to isolate a kernel from extensions such as device drivers;  Singularity, SPIN, JX, JavaOS, SafeDrive, and SVA-M are examples of system that enforce a safe execution environment.
Common asumptions of OS memory safety research Unfortunately, all these memory safety techniques (except Verve, which has very limited I/O and no MMU support) make assumptions that are routinely violated by low-level initeractions between an OS kernel and hardware, even if implemented in safe programming language.</description>
    </item>
    
    <item>
      <title>execve</title>
      <link>https://cnlelema.github.io/memo/en/os/linux/execve/</link>
      <pubDate>Fri, 05 Jul 2019 16:07:52 -0400</pubDate>
      
      <guid>https://cnlelema.github.io/memo/en/os/linux/execve/</guid>
      <description>References:
[1] How programs get run. LWN.net, 2015. [link1, link2]
Load ELF binary In fs/binfmt_elf.c: load_elf_binary(): examining ELF header.
flush_old_exec(): clears up state in kernel that refers to the previous program.
setup_new_exec(): set up kernel&amp;rsquo;s internal state for the new program. flush_signal_handlers() sets up the signal handlers for the new program. do_close_on_exec() closes all of the old program&amp;rsquo;s file descriptors.
Set up the virtual memory of the new program. The highest address for the stack is moved downward by a random offset.</description>
    </item>
    
    <item>
      <title>KCoFI</title>
      <link>https://cnlelema.github.io/memo/en/arch/sva/hwsw/kcofi/</link>
      <pubDate>Mon, 22 Jul 2019 16:29:37 -0400</pubDate>
      
      <guid>https://cnlelema.github.io/memo/en/arch/sva/hwsw/kcofi/</guid>
      <description>Reference1
 reference â†©   </description>
    </item>
    
  </channel>
</rss>